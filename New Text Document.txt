---------------------------DHCP------------------------------------

set system services dhcp-local-server group V16 interface irb.16
set access address-assignment pool V16 family inet network 172.16.30.0/24
set access address-assignment pool V16 family inet range V16-RANGE low 172.16.30.10
set access address-assignment pool V16 family inet range V16-RANGE high 172.16.30.40
 set access address-assignment pool V16 family inet dhcp-attributes maximum-lease-time 36000 set access address-assignment pool V16 family inet dhcp-attributes server-identifier
172.16.30.1
set access address-assignment pool V16 family inet dhcp-attributes name-server 8.8.8.8
set access address-assignment pool V16 family inet dhep-attributes router 172.16.30.1
set interfaces ge-0/0/10 unit 0 family ethernet-switching vlan members V16 set interfaces ge-0/0/9 unit 0 family ethernet-switching vlan members V16
set vlans V16 vlan-id 16
set vlans V16 13-interface irb.16
set interfaces irb.16 family inet address 172.16.30.2/24
set interfaces ge-0/0/8 unit 0 family ethernet-switching vlan members V16


---------------------------VLAN-----------------------------------------------

set vlans ccn vlan-id 55
set vlans vlsi vlan-id 66
set interfaces ge-0/0/6 unit 0 family ethernet-switching vlan members ccn 
set interfaces ge-0/0/10 unit 0 family ethernet-switching vlan members vlsi 
set interfaces vlan unit 55 family inet address 192.168.10.1/24
set interfaces vlan unit 66 family inet address 30.30.10.1/24
set vlans ccn l3-interface irb.55
set vlans vlsi l3-interface irb.66
set interfaces ge-0/0/23 unit 0 family init addres 20.20.20.1/30 
set routing -options static route 0.0.0.0/0 next _hop 20.20.20.2


-------------------------------------CRC-------------------------------------------
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define n strlen(key)
char data[20];
char check_data[20];
char key[20];
int data_len,i,j;
void XOR()
{
    for(j = 1;j < n; j++)
    check_data[j] = (( check_data[j] == key[j])?'0':'1');
}
void receiver()
{
    printf("Enter the received data: ");
    scanf("%s", data);
    printf("Data received: %s", data);
    crc();
    printf("\nRemainder at receiver side is: %s",check_data);
    for(i=0;(i<n-1) && (check_data[i]!='1');i++);
        if(i<n-1)
            printf("\nError detected\n");
        else
            printf("\nNo error detected\n");
}
void crc()
{
    for(i=0;i<n;i++)
        check_data[i]=data[i];
    do{
        if(check_data[0]=='1')
            XOR();
        for(j=0;j<n-1;j++)
            check_data[j]=check_data[j+1];
        check_data[j]=data[i++];
    }while(i<=data_len+n-1);
}
int main()
{
    printf("Input Data: ");
    scanf("%s",data);
    printf("\nEnter the key: ");
    scanf("%s",key);
    data_len=strlen(data);
    for(i=data_len;i<data_len+n-1;i++)
        data[i]='0';
    printf("\nInput Data with n-1 zeros: %s\n",data);
    crc();
    printf("\nRemainder at sender side is: %s",check_data);
    for(i=data_len;i<data_len+n-1;i++)
        data[i]=check_data[i-data_len];
    printf("\nFinal data to be sent: %s\n",data);
    receiver();
    return 0;
}


-------------------------------------------Echo Server------------------------
#include <stdio.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include<arpa/inet.h>
#include<stdlib.h>
#include<unistd.h>
#define BUFLEN 1024 /* buffer length */
int main(int argc, char **argv)
{
 int n;
int yes=1;
 int sd, new_sd, client_len, port;
 struct sockaddr_in server, client;
 char buf[BUFLEN];
 port = atoi(argv[1]);

 /* create a stream socket */
 if((sd = socket(AF_INET, SOCK_STREAM, 0)) == -1)
 {
 fprintf(stderr,"can't create a socket\n");
 exit(1);
 }
 /* Fill the structure fileds with values */
 server.sin_family = AF_INET;
 server.sin_port = port;
 server.sin_addr.s_addr =inet_addr("127.0.0.1");
 // Reuse the port and address
if (setsockopt(sd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(yes)) == -1) {
 perror("setsockopt");
 exit(1);
}
 /* bind an address to the socket */
 if(bind(sd, (struct sockaddr *)&server, sizeof(server)) == -1)
 {
 fprintf(stderr, "can't bind name to socket\n");
 exit(1);
 }
 /* queue up to 5 connect requests */
 listen(sd,5);
 while(1)
 {
 client_len = sizeof(client);
 if((new_sd = accept(sd, (struct sockaddr *) &client, &client_len)) == -1)
 {
 fprintf(stderr, "can't accept client \n");
 exit(1);
 }
 n = read(new_sd, buf, sizeof(buf));
printf("The message received by client : %s\n",buf);
 write(new_sd, buf,n);
close(new_sd);
 }
 close(sd);
 return(0);
}


Client 
#include <stdio.h>
#include <netdb.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include<arpa/inet.h>
#include<stdlib.h>
#include<unistd.h>
#define BUFLEN 1024 /* buffer length */
int main(int argc, char **argv)
{
 int n;
 int sd, port;
 char buf[BUFLEN];

 struct sockaddr_in server;

 port=atoi(argv[1]);
 /* create a stream socket */
 if(( sd = socket(AF_INET, SOCK_STREAM, 0)) == -1)
 {
 fprintf(stderr, "can't create a socket\n");
 exit(1);
 }
 // bzero((char *)&server, sizeof(struct sockaddr_in));
 server.sin_family = AF_INET;
 server.sin_port = port;
 server.sin_addr.s_addr = inet_addr("127.0.0.1");
 /* connecting to the server */
 if(connect(sd, (struct sockaddr *)&server, sizeof(server)) == -1)
 {
 fprintf(stderr, "can't connect\n");
 exit(1);
 }
 printf("Enter the message to be echoed: ");
 scanf("%s",buf); /* get user's text */
 write(sd, buf, BUFLEN); /* send it out */
 printf("Echoed Messege:\n**************\n");

 n = read(sd, buf, sizeof(buf));
 printf("%s\n",buf);

 close(sd);
 return(0);
}



----------------------------------------CHAT-app----------------------------------------

Chat Server
#include <stdio.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
 #include<arpa/inet.h>
#include<stdlib.h>
#include<unistd.h>
#include<string.h>
#define SERVER_TCP_PORT  5750   /* well known port */
#define BUFLEN                 256        /* buffer length */
#define MAX 80
int flag=0;
int func(int sockfd)
{
char buff[MAX];
int n;
for(;;)
{
if(flag==1)
  break;
bzero(buff,MAX);
n=read(sockfd,buff,sizeof(buff));
printf("Message from client is:%s",buff);
bzero(buff,MAX);
n=0;
//while((buff[n++]=getchar())!='\n');
printf("Enter message to be sent to client:\n");
fgets(buff,sizeof(buff),stdin);
n=strlen(buff); 
if(strncmp("exit",buff,4)==0)
{
printf("Server Exit ...\n");
flag=1;
break;
}
else
{
write(sockfd,buff,sizeof(buff));
bzero(buff,MAX);
}
} // for loop
}
int main(int argc, char **argv)
{
        int n;
	int yes=1;
        int sd, new_sd, client_len, port;
        struct sockaddr_in server, client;
        char  buff[BUFLEN];
         port = atoi(argv[1]);
 // port=5750;
        /* create a stream socket */
        if((sd = socket(AF_INET, SOCK_STREAM, 0)) == -1)
        {
                fprintf(stderr,"can't create a socket\n");
                exit(1);
        }
        /* bind an address to the socket */
        // bzero((char *)&server, sizeof(struct sockaddr_in));
        server.sin_family = AF_INET;
        server.sin_port = port;
        server.sin_addr.s_addr =htonl(INADDR_ANY);

	if (setsockopt(sd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(yes)) == -1) {
    		perror("setsockopt");
   		 exit(1);
	}
        if(bind(sd, (struct sockaddr *)&server, sizeof(server)) == -1)
        {
                fprintf(stderr, "can't bind name to socket\n");
                exit(1);
        }
        /* queue up to 5 connect requests */
        listen(sd,5);
        while(1)
        {
                client_len = sizeof(client);
                if((new_sd = accept(sd, (struct sockaddr *) &client, &client_len)) == -1)
                {
                        fprintf(stderr, "can't accept client\n");
                        exit(1);
                }
                func(new_sd);
 		close(new_sd);
        }
        close(sd);
        return(0);
}

Chat client
#include <stdio.h>
#include <netdb.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include<arpa/inet.h>
#include<stdlib.h>
#include<unistd.h>
#include<string.h>

#define  BUFLEN                   256                 /* buffer length */
#define MAX 80
void func(int sockfd)
{
char buff[MAX];
int n;
for(;;)
{
bzero(buff,sizeof(buff));
printf("Enter the message to be sent: ");
n=0;
fgets(buff,sizeof(buff),stdin);
if((strncmp(buff,"exit",4))==0)
{
printf("Client Exit...\n");
break;
}
n=strlen(buff);
write(sockfd,buff,n);
bzero(buff,sizeof(buff));
read(sockfd,buff,sizeof(buff));
printf("Message from Server : %s",buff);
}
}
int main(int argc, char **argv)
{
        int n;
        int sd, port;
        char buff[BUFLEN];
       struct sockaddr_in server;
     //command line argument
       port=atoi(argv[1]);
        /* create a stream socket */
        if(( sd = socket(AF_INET, SOCK_STREAM, 0)) == -1)
        {
                fprintf(stderr, "can't create a socket\n");
                exit(1);
        }
       // bzero((char *)&server, sizeof(struct sockaddr_in));
        server.sin_family = AF_INET;
        server.sin_port = port;
        server.sin_addr.s_addr = inet_addr("10.3.1.142");
        /* connecting to the server */
        if(connect(sd, (struct sockaddr *)&server, sizeof(server)) == -1)
        {
                fprintf(stderr, "can't connect\n");
                exit(1);
        }
       func(sd);    
       close(sd);
        return(0); 
}

--------------------------------------------FTP---------------------------------------------
	#include<stdio.h>
#include <sys/socket.h> 
	#include <arpa/inet.h>
	#include <sys/stat.h>
	#include <sys/sendfile.h>
	#include <fcntl.h>
	#include <stdlib.h>
	#include <string.h>
	

	#define FILENAME 	"a.txt"
	#define SERVER_IP 	"127.0.0.1"
	#define SERVER_PORT 	65496
	

	int main(int argc , char **argv)
	{
		int 	socket_desc;
		struct 	sockaddr_in server;
		char 	request_msg[BUFSIZ],
			reply_msg[BUFSIZ];
	

		// Variables for the file being received
		int	file_size,
			file_desc;
		char	*data;
			
		socket_desc = socket(AF_INET, SOCK_STREAM, 0);
		if (socket_desc == -1)
		{
			perror("Could not create socket");
			return 1;
		}
	

		server.sin_addr.s_addr = inet_addr(SERVER_IP);
		server.sin_family = AF_INET;
		server.sin_port = htons(SERVER_PORT);
	

		// Connect to server
		if (connect(socket_desc, (struct sockaddr *)&server, sizeof(server)) < 0)
		{
			perror("Connection failed");
			return 1;
		}
	

		// Get a file from server
		strcpy(request_msg, "Get ");
		strcat(request_msg, FILENAME);
		write(socket_desc, request_msg, strlen(request_msg));
		recv(socket_desc, reply_msg, 2, 0);
		
		// Start receiving file
		if (strcmp(reply_msg, "OK") == 0) {
	

			recv(socket_desc, &file_size, sizeof(int), 0);
			data = malloc(file_size);
			file_desc = open(FILENAME, O_CREAT | O_EXCL | O_WRONLY, 0666);
			recv(socket_desc, data, file_size, 0);
			write(file_desc, data, file_size);
			close(file_desc);
		}
		else {
	

			fprintf(stderr, "Bad request\n");
		}
	

		return 0;
	}






SERVER:
#include<stdio.h>
#include<arpa/inet.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<netinet/in.h>
#include<netdb.h>
#include<stdlib.h>
#include<string.h>
#include<unistd.h>
#define SERV_TCP_PORT 5035
#define MAX 60
int i, j, tem;
char buff[4096], t;
FILE *f1;
int main(int afg, char *argv)
{
       int sockfd, newsockfd, clength;
       struct sockaddr_in serv_addr,cli_addr;
       char t[MAX], str[MAX];
       strcpy(t,"exit");
       sockfd=socket(AF_INET, SOCK_STREAM,0);
       serv_addr.sin_family=AF_INET;
       serv_addr.sin_addr.s_addr=INADDR_ANY;
       serv_addr.sin_port=htons(SERV_TCP_PORT);
       printf("\nBinded");
       bind(sockfd,(struct sockaddr*)&serv_addr, sizeof(serv_addr));
       printf("\nListening...");
       listen(sockfd, 5);
       clength=sizeof(cli_addr);
       newsockfd=accept(sockfd,(struct sockaddr*) &cli_addr,&clength);
       close(sockfd);
       read(newsockfd, &str, MAX);
       printf("\nClient message\n File Name : %s\n", str);
       f1=fopen(str, "r");
       while(fgets(buff, 4096, f1)!=NULL)
       {
            write(newsockfd, buff,MAX);
            printf("\n");
       }
       fclose(f1);
       printf("\nFile Transferred\n");
       return 0;
}



-----------------------------------------------OSPF---------------------------------
device-1

set interfaces ge-0/0/0 unit 0 family inet address
10.10.10.1/24
set interfaces ge-0/0/1 unit 0 family inet address
10.10.10.2/24
set interfaces ge-0/0/2 unit 0 family ethernet-switching vlan members VOICE
set interfaces vian unit 10 family inet address 192.168.1.1/24
set protocols ospf area 0.0.0.10 interface ge-0/0/0.0 metric 5
set protocols ospf area 0.0.0.10 interface ge-0/0/1.0 metric 10
set protocols ospf area 0.0.0.10 interface irb. 10
set vlans VOICE vlan-id 10
set vlans VOICE 13-interface irb.10
set interfaces irb.10 family inet address
192.168.1.1/24


device-2

set interfaces ge-0/0/0 unit 0 family inet address
10.10.10.8/24
set interfaces ge-0/0/1 unit 0 family inet address
10.10.10.7/24
set interfaces ge-0/0/2 unit 0 family ethernet-switching vlan members DATA
set interfaces vlan unit 20 family inet address
172.16.1.1/24
set protocols ospf area 0.0.0.10 interface ge-0/0/0.0
metric 5
set protocols ospf area 0.0.0.10 interface ge-0/0/1.0
AS 10.10.10.8/24
set interfaces ge-0/0/1 unit @ family inet address
10.10.10.7/24
set interfaces ge-0/0/2 unit 0 family ethernet-switching vlan members DATA
set interfaces vlan unit 20 family inet address
172.16.1.1/24
set protocols ospf area 0.0.0.10 interface ge-0/0/0.0
metric 5
set protocols ospf area 0.0.0.10 interface ge-0/0/1.0
metric 10
set protocols ospf area 0.0.0.10 interface irb.20
set vlans DATA vlan-id 20
set vlans DATA 13-interface irb.20
set interfaces irb.20 family inet address
172.16.1.1/24


-------------------------BIT STUFFING--------------------------
#include <stdio.h>
#include <string.h>
// Function for bit stuffing
void bitStuffing(int N, int arr[])
{
	// Stores the stuffed array
	int brr[30];

	// Variables to traverse arrays
	int i, j, k;
	i = 0;
	j = 0;

	// Loop to traverse in the range [0, N)
	while (i < N) {

		// If the current bit is a set bit
		if (arr[i] == 1) {
		
			// Stores the count of consecutive ones
			int count = 1;

			// Insert into array brr[]
			brr[j] = arr[i];

			// Loop to check for
			// next 5 bits
			for (k = i + 1;
				arr[k] == 1 && k < N && count < 5; k++) {
				j++;
				brr[j] = arr[k];
				count++;

				// If 5 consecutive set bits
				// are found insert a 0 bit
				if (count == 5) {
					j++;
					brr[j] = 0;
				}
				i = k;
			}
		}

		// Otherwise insert arr[i] into
		// the array brr[]
		else {
			brr[j] = arr[i];
		}
		i++;
		j++;
	}

	// Print Answer
	for (i = 0; i < j; i++)
		printf("%d", brr[i]);
}

// Driver Code
int main()
{
	int N = 6;
	int arr[] = { 1, 1, 1, 1, 1, 1 };

	bitStuffing(N, arr);

	return 0;
}

Bit Destuffing
// C program for the above approach
#include <stdio.h>
#include <string.h>
// Function for bit de-stuffing
void bitDestuffing(int N, int arr[])
{
	// Stores the de-stuffed array
	int brr[30];

	// Variables to traverse the arrays
	int i, j, k;
	i = 0;
	j = 0;

	// Stores the count of consecutive ones
	int count = 1;

	// Loop to traverse in the range [0, N)
	while (i < N) {

		// If the current bit is a set bit
		if (arr[i] == 1) {

			// Insert into array brr[]
			brr[j] = arr[i];

			// Loop to check for
			// the next 5 bits
			for (k = i + 1;
				arr[k] == 1
				&& k < N
				&& count < 5;
				k++) {
				j++;
				brr[j] = arr[k];
				count++;

				// If 5 consecutive set
				// bits are found skip the
				// next bit in arr[]
				if (count == 5) {
					k++;
				}
				i = k;
			}
		}

		// Otherwise insert arr[i] into
		// the array brr
		else {
			brr[j] = arr[i];
		}
		i++;
		j++;
	}

	// Print Answer
	for (i = 0; i < j; i++)
		printf("%d", brr[i]);
}

// Driver Code
int main()
{
	int N = 7;
	int arr[] = { 1, 1, 1, 1, 1, 0, 1 };

	bitDestuffing(N, arr);

	return 0;
}

